/*
 * AUTOGENERATED - DO NOT EDIT
 *
 * This file is generated from server-decoration.xml
 * To regenerate, run the “refresh-wayland-wrapper” target.
 */

#include "server-decoration_wrapper.h"

#include <boost/throw_exception.hpp>
#include <boost/exception/diagnostic_information.hpp>

#include <wayland-server-core.h>

#include "mir/log.h"

namespace mir
{
namespace wayland
{
extern struct wl_interface const org_kde_kwin_server_decoration_interface_data;
extern struct wl_interface const org_kde_kwin_server_decoration_manager_interface_data;
extern struct wl_interface const wl_surface_interface_data;
}
}

namespace mw = mir::wayland;

namespace
{
struct wl_interface const* all_null_types [] {
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr};
}

// ServerDecorationManager

mw::ServerDecorationManager* mw::ServerDecorationManager::from(struct wl_resource* resource)
{
    return static_cast<ServerDecorationManager*>(wl_resource_get_user_data(resource));
}

struct mw::ServerDecorationManager::Thunks
{
    static void create_thunk(struct wl_client* client, struct wl_resource* resource, uint32_t id, struct wl_resource* surface)
    {
        auto me = static_cast<ServerDecorationManager*>(wl_resource_get_user_data(resource));
        try
        {
            me->create(client, resource, id, surface);
        }
        catch(...)
        {
            ::mir::log(::mir::logging::Severity::critical,
                       "frontend:Wayland",
                       std::current_exception(),
                       "Exception processing ServerDecorationManager::create() request");
        }
    }

    static void bind_thunk(struct wl_client* client, void* data, uint32_t version, uint32_t id)
    {
        auto me = static_cast<ServerDecorationManager*>(data);
        auto resource = wl_resource_create(client, &org_kde_kwin_server_decoration_manager_interface_data,
                                           std::min(version, me->max_version), id);
        if (resource == nullptr)
        {
            wl_client_post_no_memory(client);
            BOOST_THROW_EXCEPTION((std::bad_alloc{}));
        }
        wl_resource_set_implementation(resource, Thunks::request_vtable, me, nullptr);
        try
        {
            me->bind(client, resource);
        }
        catch(...)
        {
            ::mir::log(::mir::logging::Severity::critical,
                       "frontend:Wayland",
                       std::current_exception(),
                       "Exception processing ServerDecorationManager::bind() request");
        }
    }

    static struct wl_interface const* create_types[];
    static struct wl_message const request_messages[];
    static struct wl_message const event_messages[];
    static void const* request_vtable[];
};

mw::ServerDecorationManager::ServerDecorationManager(struct wl_display* display, uint32_t max_version)
    : global{wl_global_create(display, &org_kde_kwin_server_decoration_manager_interface_data, max_version, this, &Thunks::bind_thunk)},
      max_version{max_version}
{
    if (global == nullptr)
    {
        BOOST_THROW_EXCEPTION((std::runtime_error{"Failed to export org_kde_kwin_server_decoration_manager interface"}));
    }
}

mw::ServerDecorationManager::~ServerDecorationManager()
{
    wl_global_destroy(global);
}

void mw::ServerDecorationManager::send_default_mode_event(struct wl_resource* resource, uint32_t mode) const
{
    wl_resource_post_event(resource, Opcode::default_mode, mode);
}

void mw::ServerDecorationManager::destroy_wayland_object(struct wl_resource* resource) const
{
    wl_resource_destroy(resource);
}

struct wl_interface const* mw::ServerDecorationManager::Thunks::create_types[] {
    &org_kde_kwin_server_decoration_interface_data,
    &wl_surface_interface_data};

struct wl_message const mw::ServerDecorationManager::Thunks::request_messages[] {
    {"create", "no", create_types}};

struct wl_message const mw::ServerDecorationManager::Thunks::event_messages[] {
    {"default_mode", "u", all_null_types}};

void const* mw::ServerDecorationManager::Thunks::request_vtable[] {
    (void*)Thunks::create_thunk};

// ServerDecoration

mw::ServerDecoration* mw::ServerDecoration::from(struct wl_resource* resource)
{
    return static_cast<ServerDecoration*>(wl_resource_get_user_data(resource));
}

struct mw::ServerDecoration::Thunks
{
    static void release_thunk(struct wl_client*, struct wl_resource* resource)
    {
        auto me = static_cast<ServerDecoration*>(wl_resource_get_user_data(resource));
        try
        {
            me->release();
        }
        catch(...)
        {
            ::mir::log(::mir::logging::Severity::critical,
                       "frontend:Wayland",
                       std::current_exception(),
                       "Exception processing ServerDecoration::release() request");
        }
    }

    static void request_mode_thunk(struct wl_client*, struct wl_resource* resource, uint32_t mode)
    {
        auto me = static_cast<ServerDecoration*>(wl_resource_get_user_data(resource));
        try
        {
            me->request_mode(mode);
        }
        catch(...)
        {
            ::mir::log(::mir::logging::Severity::critical,
                       "frontend:Wayland",
                       std::current_exception(),
                       "Exception processing ServerDecoration::request_mode() request");
        }
    }

    static void resource_destroyed_thunk(wl_resource* resource)
    {
        delete static_cast<ServerDecoration*>(wl_resource_get_user_data(resource));
    }

    static struct wl_message const request_messages[];
    static struct wl_message const event_messages[];
    static void const* request_vtable[];
};

mw::ServerDecoration::ServerDecoration(struct wl_client* client, struct wl_resource* parent, uint32_t id)
    : client{client},
      resource{wl_resource_create(client, &org_kde_kwin_server_decoration_interface_data, wl_resource_get_version(parent), id)}
{
    if (resource == nullptr)
    {
        wl_resource_post_no_memory(parent);
        BOOST_THROW_EXCEPTION((std::bad_alloc{}));
    }
    wl_resource_set_implementation(resource, Thunks::request_vtable, this, &Thunks::resource_destroyed_thunk);
}

void mw::ServerDecoration::send_mode_event(uint32_t mode) const
{
    wl_resource_post_event(resource, Opcode::mode, mode);
}

void mw::ServerDecoration::destroy_wayland_object() const
{
    wl_resource_destroy(resource);
}

struct wl_message const mw::ServerDecoration::Thunks::request_messages[] {
    {"release", "", all_null_types},
    {"request_mode", "u", all_null_types}};

struct wl_message const mw::ServerDecoration::Thunks::event_messages[] {
    {"mode", "u", all_null_types}};

void const* mw::ServerDecoration::Thunks::request_vtable[] {
    (void*)Thunks::release_thunk,
    (void*)Thunks::request_mode_thunk};

namespace mir
{
namespace wayland
{

struct wl_interface const org_kde_kwin_server_decoration_manager_interface_data {
    "org_kde_kwin_server_decoration_manager", 1,
    1, mw::ServerDecorationManager::Thunks::request_messages,
    1, mw::ServerDecorationManager::Thunks::event_messages};

struct wl_interface const org_kde_kwin_server_decoration_interface_data {
    "org_kde_kwin_server_decoration", 1,
    2, mw::ServerDecoration::Thunks::request_messages,
    1, mw::ServerDecoration::Thunks::event_messages};

}
}
